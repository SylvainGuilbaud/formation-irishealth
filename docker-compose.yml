services:
  iris:
    build: 
      context: .
      dockerfile: Dockerfile
    restart: always
    container_name: formation-irishealth
    hostname: formation-irishealth
    environment:
      - ISC_CPF_MERGE_FILE=/irisdev/app/merge.cpf
      - ISC_DATA_DIRECTORY=/volumes/iris
    ports: 
      - 1972
      - 53773
    volumes:
      - .:/irisdev/app
      - ./volumes:/volumes
      - ./data:/data
      - ./code:/code
      - ./key:/key
      # - /etc/timezone:/etc/timezone:ro
      # - /etc/localtime:/etc/localtime:ro
    command: --key /irisdev/app/key/iris.key -a /irisdev/app/configure.sh


  webgateway:
    image: containers.intersystems.com/intersystems/webgateway:latest-em
    init: true
    ports:
    - 880:80
    - 843:443
    environment:
    - ISC_CSP_CONF_FILE=/webgateway/CSP.conf
    - ISC_CSP_INI_FILE=/webgateway/CSP.ini
    volumes:
      - ./webgateway:/webgateway
      - ./webgateway/cert:/opt/cert
  iris-em:
    image: ${IMAGE_IRIS_EM} # EXTENDED MAINTENANCE
    init: true
    container_name: ${CONTAINER_IRIS_EM}
    hostname: ${CONTAINER_IRIS_EM}
    volumes:
    - type: bind
      source: ./IRIS
      target: /IRIS
    - .:/irisdev/app
    - ./volumes:/volumes
    - ./data:/data
    - ./code:/code
    command: -a /IRIS/configure.sh
    ports:
      - 19724:1972
      - 8004:52773
    environment:
      - TINI_SUBREAPER=1
      - ISC_CPF_MERGE_FILE=/irisdev/app/merge.cpf
      - ISC_DATA_DIRECTORY=/volumes/iris-em

  iris-cd:
    image: ${IMAGE_IRIS_CD} # CONTINUOUS DELIVERY
    init: true
    container_name: ${CONTAINER_IRIS_CD}
    hostname: ${CONTAINER_IRIS_CD}
    volumes:
    - type: bind
      source: ./IRIS
      target: /IRIS
    - .:/irisdev/app
    - ./volumes:/volumes
    - ./data:/data
    - ./code:/code
    command: -a /IRIS/configure.sh
    ports:
      - 19725:1972
      - 8005:52773
    environment:
      - TINI_SUBREAPER=1
      - ISC_CPF_MERGE_FILE=/irisdev/app/merge.cpf
      - ISC_DATA_DIRECTORY=/volumes/iris-cd

  iris-preview:
    image: ${IMAGE_IRIS_PREVIEW} # DEVELOPER PREVIEW
    init: true
    container_name: ${CONTAINER_IRIS_PREVIEW}
    hostname: ${CONTAINER_IRIS_PREVIEW}
    volumes:
    - type: bind
      source: ./IRIS
      target: /IRIS
    - .:/irisdev/app
    - ./volumes:/volumes
    - ./data:/data
    - ./code:/code
    command: -a /IRIS/configure.sh
    ports:
      - 19726:1972
      - 8006:52773
    environment:
      - TINI_SUBREAPER=1
      - ISC_CPF_MERGE_FILE=/irisdev/app/merge.cpf
      - ISC_DATA_DIRECTORY=/volumes/iris-preview

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./postgreSQL:/docker-entrypoint-initdb.d/
      - ./volumes/postgreSQL:/var/lib/postgresql/data
    ports:
      - 8007:5432
    restart: unless-stopped
    healthcheck:
        test: ["CMD", "pg_isready", "-U", "postgres"]
        interval: 30s
        timeout: 30s
        retries: 3
    # networks:
    #   irisnetwork:
    #     ipv4_address: 172.0.0.12
  ftp_server:
    image: delfer/alpine-ftp-server:latest
    container_name: ftp-server
    ports:
      - "281:21"
      - "21800-21810:21000-21010"
    volumes: 
      - "./data:/home/app/"
      # - "./data/passwd:/etc/pure-ftpd/passwd"
# uncomment for ssl/tls, see https://github.com/stilliard/docker-pure-ftpd#tls
#      - "/folder_on_disk/ssl:/etc/ssl/private/"
# or ssl/tls with Let's Encrypt (cert and key as two files)
#      - "/etc/letsencrypt/live/<your_server>/cert.pem:/etc/ssl/private/pure-ftpd-cert.pem"
#      - "/etc/letsencrypt/live/<your_server>/privkey.pem:/etc/ssl/private/pure-ftpd-key.pem"
    environment:
      PUBLICHOST: "localhost"
      USERS: "app|youneverknow|/home/app|10000"
      ADDRESS: "172.0.0.100"
# also for ssl/tls:
#      ADDED_FLAGS: "--tls=2"
    restart: always
    # networks:
    #   irisnetwork:
    #     ipv4_address: 172.0.0.100
